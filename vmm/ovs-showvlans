#!/bin/bash

PROGNAME="ovs-showvlans"
REVISION="0.0.2"
OVS_PROGS="~/Projects/customhosting/vmm"	# Location of other ovs scripts
PATH=$OVS_PROGS:$PATH				# Update $PATH for this scripts context

function print_usage {
  cat <<EOF
  NAME
    $PROGNAME - list vlans on an openvswitch network

  SYNOPSIS
    $PROGNAME [-n <name>]  [-V] [-h]

  DESCRIPTION
    Use to show a list of all vlan portgroups on an existing OpenVSwitch based Libvirt network.

  OPTIONS
    [-n <network>] 	Libvirt network name. Must be an openvswitch network
    [-V]		Shows the version information
    [-h]		Shows this message
    
EOF
  exit 2
}

function print_version {
  echo "$PROGNAME $REVISION"
  echo "Ben Vincent - https://github.com/neoloc/customhosting"
  exit 2
}

function print_gethelp {
  echo ""
  echo "Something went wrong, read the above message for more information."
  echo "Additionally you can get help by running '$PROGNAME -h'"
  exit 2
}

function set_network {
  virsh net-info $TEMP_NETWORK > /dev/null 2>&1
  if [ $? -eq 1 ]; then
    echo "Network not found"
    exit 1
  elif [ -n "$(virsh net-dumpxml $TEMP_NETWORK | grep openvswitch)" ]; then
    NETWORK=$TEMP_NETWORK
  elif [ -z "$(virsh net-dumpxml $TEMP_NETWORK | grep openvswitch)" ]; then
    echo "Network: $TEMP_NETWORK not an openvswitch network"
    exit 1
  else
    echo "ERROR: Something went wrong, should not get here. Function 'set_network'"
    exit 2
  fi
}


# Check if there are any arguments
if [[ $# -eq 0 ]]; then
  echo "No arguments supplied"
  print_gethelp
  exit 1
fi

# Set some temporary variables
TEMP_NETWORK="z"

# Get flags and options
while getopts 'Vhn:' flag; do
  case "${flag}" in
    n) TEMP_NETWORK="${OPTARG}";;
    V) print_version ;;
    h) print_usage ;;
  esac
done

# Check the arguments were stored in the variables
if [ "$TEMP_NETWORK" = "z" ]; then echo "ERROR: Network not set."; print_gethelp; fi

# Process
set_network
if [ -n $NETWORK ] ; then
  # dump the net xml to file for sed command
  DUMPFILE="/tmp/$(uuidgen)"
  virsh net-dumpxml $NETWORK > $DUMPFILE
  # dump the net xml into a variable for the for loop
  XML=$(virsh net-dumpxml $NETWORK)
  PORTGROUPS=$(echo "$XML" | grep "<portgroup name='" | awk -F\' '{print $2}')
  echo -e "Available VLANS in network: '$NETWORK'\n"
  echo -e "\tVLANID\t\tPORTGROUP"
  echo "---------------------------------------------"
  for PORTGROUP in $PORTGROUPS; do
    # Check for trunks, we are not listing them here.
    if [ -z "$(sed -n "/<portgroup name='${PORTGROUP}'/,/<\/portgroup>/p" $DUMPFILE | grep "trunk")" ]; then
      sed -n "/<portgroup name='${PORTGROUP}'/,/<\/portgroup>/p" $DUMPFILE | grep "default='yes'>" > /dev/null 2>&1
      if [ $? -eq 0 ]; then
	# Default vlan = 1
	VLANID="1"
	echo -e "\t\"$VLANID\"\t\t$PORTGROUP"
      else
	VLANID=$(sed -n "/<portgroup name='${PORTGROUP}'/,/<\/portgroup>/p" $DUMPFILE | grep "<tag id='" | awk -F\' '{print $2}')
	echo -e "\t\"$VLANID\"\t\t$PORTGROUP"
      fi
    fi
  done
echo ""
fi

# Cleanup
rm $DUMPFILE