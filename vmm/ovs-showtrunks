#!/bin/bash

PROGNAME="ovs-showtrunks"
REVISION="0.0.2"

function print_usage {
  cat <<EOF
  NAME
    $PROGNAME - list trunks on an openvswitch network

  SYNOPSIS
    $PROGNAME [-n <name>]  [-V] [-h]

  DESCRIPTION
    Use to show a list of all trunk portgroups on an existing OpenVSwitch based Libvirt network.

  OPTIONS
    [-n <network>] 	Libvirt network name. Must be an openvswitch network
    [-V, --version]	Shows the version information
    [-h, --help]	Shows this message

EOF
  exit 2
}

function print_version {
  echo "$PROGNAME $REVISION"
  echo "Ben Vincent - https://github.com/neoloc/customhosting"
  exit 2
}

function print_gethelp {
  echo ""
  echo "Something went wrong, read the above message for more information."
  echo "Additionally you can get help by running '$PROGNAME -h'"
  exit 2
}

function set_network {
  virsh net-info $TEMP_NETWORK > /dev/null 2>&1
  if [ $? -eq 1 ]; then
    echo "Network not found"
    exit 1
  elif [ -n "$(virsh net-dumpxml $TEMP_NETWORK | grep openvswitch)" ]; then
    NETWORK=$TEMP_NETWORK
  elif [ -z "$(virsh net-dumpxml $TEMP_NETWORK | grep openvswitch)" ]; then
    echo "Network: $TEMP_NETWORK not an openvswitch network"
    exit 1
  else
    echo "ERROR: Something went wrong, should not get here. Function 'set_network'"
    exit 2
  fi
}


# Check if there are any arguments
if [[ $# -eq 0 ]]; then
  echo "No arguments supplied"
  print_gethelp
  exit 1
fi

# Set some temporary variables
TEMP_NETWORK="z"

# Get flags and options
while getopts 'Vhn:' flag; do
  case "${flag}" in
    n) TEMP_NETWORK="${OPTARG}";;
    V) print_version ;;
    h) print_usage ;;
  esac
done

# Check the arguments were stored in the variables
if [ "$TEMP_NETWORK" = "z" ]; then echo "ERROR: Network not set."; print_gethelp; fi

# Process
set_network
if [ -n $NETWORK ] ; then
  # dump the net xml to file for sed command
  DUMPFILE="/tmp/$(uuidgen)"
  virsh net-dumpxml $NETWORK > $DUMPFILE
  # dump the net xml into a variable for the for loop
  XML=$(virsh net-dumpxml $NETWORK)
  TRUNKS=$(echo "$XML" | grep -B1 "<vlan trunk='yes'>" | grep -vE "(<vlan trunk='yes'>|--)" | awk -F\' '{print $2}')
  echo -e "Available Trunks in network: '$NETWORK'\n"
  echo -e "\tPORTGROUP\t\tVLANS"
  echo "---------------------------------------------"
  for TRUNK in $TRUNKS; do
      ALLVLANS=""
      COUNT=0
      for VLAN in $(sed -n "/<portgroup name='${TRUNK}'>/,/<\/portgroup>/p" $DUMPFILE | grep "<tag id='" | awk -F\' '{print $2}'); do
	if [ $COUNT -eq 0 ]; then
	  ALLVLANS="$VLAN"
	else
	  ALLVLANS="$ALLVLANS, $VLAN"
	fi
	COUNT=$[$COUNT +1]
      done
  echo -e "\t$TRUNK\t\t$ALLVLANS"
  done
echo ""
fi

# Cleanup
rm $DUMPFILE