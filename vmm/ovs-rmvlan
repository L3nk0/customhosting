#!/bin/bash

PROGNAME="ovs-rmvlan"
REVISION="0.0.2"
OVS_PROGS="~/Projects/customhosting/vmm"	# Location of other ovs scripts
PATH=$OVS_PROGS:$PATH				# Update $PATH for this switches context

function print_usage {
  cat <<EOF
  NAME
    $PROGNAME - remove a portgroup from an openvswitch network

  SYNOPSIS
    $PROGNAME [-n <name>] [-p <portgroup name>] [-V] [-h]

  DESCRIPTION
    Use to remove a VLAN based Portgroup on an OpenVSwitch based libvirt network

  OPTIONS
    [-n <network>] 	Libvirt network name. Must be an openvswitch network
    [-p <portgroup>]	Name of the Portgroup
    [-V]		Shows the version information
    [-h]		Shows this message

EOF
  exit 2
}

function print_version {
  echo "$PROGNAME $REVISION"
  echo "Ben Vincent - https://github.com/neoloc/customhosting"
  exit 2
}

function print_gethelp {
  echo ""
  echo "Something went wrong, read the above message for more information."
  echo "Additionally you can get help by running '$PROGNAME -h'"
  exit 2
}

function set_network {
  virsh net-info $TEMP_NETWORK > /dev/null 2>&1
  if [ $? -eq 1 ]; then
    echo "Network not found"
    exit 1
  elif [ -n "$(virsh net-dumpxml $TEMP_NETWORK | grep openvswitch)" ]; then
    NETWORK=$TEMP_NETWORK
  elif [ -z "$(virsh net-dumpxml $TEMP_NETWORK | grep openvswitch)" ]; then
    echo "Network: $TEMP_NETWORK not an openvswitch network"
    exit 1
  else
    echo "ERROR: Something went wrong, should not get here. Function 'set_network'"
    exit 2
  fi
}

function set_portgroup {
  virsh net-dumpxml $NETWORK | grep "portgroup name='${TEMP_PORTGROUP}'" > /dev/null 2>&1
  if [ $? -eq 1 ]; then
    echo "PortGroup: '$TEMP_PORTGROUP' on Network: '$NETWORK' doesn't exist"
    exit 1
  else
  PORTGROUP=$TEMP_PORTGROUP
  fi
}

function is_portgroup_not_a_trunk {
  ovs-showtrunks -n $NETWORK | grep "\"$PORTGROUP\""  > /dev/null 2>&1
  if [ $? -eq 0 ]; then
    echo "The portgroup '$TEMP_PORTGROUP' is a trunk"
    exit 1
  fi
}

function get_vlan {
  ovs-showvlans -n $NETWORK | grep "${PORTGROUP}$" > /dev/null 2>&1
  if [ $? -eq 0 ]; then
    VLAN=$(ovs-showvlans -n $NETWORK | grep "${PORTGROUP}$" | awk -F\" '{print $2}')
  fi
}

function gen_xml {
  XML="<portgroup name='${PORTGROUP}'><vlan><tag id='${VLAN}'/></vlan></portgroup>"
}

function remove_portgroup {
  if [ "$(echo $XML | wc -m)" = "57" ] || [ "$(echo $XML | wc -m)" = "1" ]; then
    echo "XML is missing data, unable to process further. Exiting"
    exit 1
  else
    virsh net-update $NETWORK delete portgroup --xml "$XML" --live --config
    if [ $? -eq 0 ]; then
      echo -e "\t --> VLAN '$VLAN' has been removed from portgroup '$PORTGROUP' on network '$NETWORK'"
    else
      echo "ERROR - VLAN '$VLAN' failed to be removed from portgroup '$PORTGROUP' on network '$NETWORK'"
    fi
  fi
}

# Check if there are any arguments
if [[ $# -eq 0 ]]; then
  echo "No arguments supplied"
  print_gethelp
  exit 1
fi

# Set some temporary variables
TEMP_NETWORK="z"
TEMP_PORTGROUP="z"

# Get flags and options
while getopts 'Vhn:p:' flag; do
  case "${flag}" in
    n) TEMP_NETWORK="${OPTARG}";;
    p) TEMP_PORTGROUP="${OPTARG}";;
    V) print_version ;;
    h) print_usage ;;
  esac
done

# Check the arguments were stored in the variables
if [ "$TEMP_NETWORK" = "z" ]; then echo "ERROR: Network not set."; print_gethelp; fi
if [ "$TEMP_PORTGROUP" = "z" ]; then echo "ERROR: Portgroup not set."; print_gethelp; fi

# Process
set_network
set_portgroup
is_portgroup_not_a_trunk
get_vlan
gen_xml
remove_portgroup

